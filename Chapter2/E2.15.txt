Eva lu ator isn't exactly right (although she is right to a certain extent). 
par2 is a better program than par1 for computing parallel resistances. 
The reason is that par2 keeps error tolerances down to minimum at each state 
of computation. In par1 the error tolerances get compounded. 

We know from exercise 2.13 that given two intervals i1 and i2 in the center
percent form the percentage tolerance of the result is the sum of the
percentage tolerances of the factors. The same goes for division as it is
nothing but inverse multiplication.  The resulting tolerance of adding two 
intervals with same tolerance is same as the original tolerance of either one 
of the arguments.  In other words:

1. for result = i1 * i2  t(result) = t1 + t2
2. for result = i1 / i2  t(result) = t1 + t2
3. for result = i1 + i2  t(result) = t (Assuming t1=t2=t)

For the sake of simplification assume that both R1 and R2 have the same
tolerance t. We also assume that t is small in order to simplify the analysis.

Now let us analyze both par1 and par2

In par1 the steps are
   1. x = r1 * r2      tx = t + t = 2t
   2. y = r1 + r2      ty = t
   3. result = x/y     t(result) = tx + ty = 3t

The final tolerance for par1 is roughly 3t

In par2 the steps are
   1. one = (1, 1)    tone = 0
   2. x = one/r1      tx = tone + t = t
   3. y = one/r2      ty = tone + t = t
   4. z = x + y       tz = tx or ty = t
   5. result = one/z  t(result) = tone + tz = t

The final tolerance for par2 is just t (roughly)

By carefully factoring the expressions to keep tolerances to a minimum at each
stage par2 produces a tighter error bound.
