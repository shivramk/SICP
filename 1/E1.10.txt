(define (A x y)
 (cond ((= y 0) 0)
       ((= x 0) (* 2 y))
       ((= y 1) 2)
       (else (A (- x 1) (A x (- y 1))))))

(A 1 10) -> 1024
(A 2 4) -> 65536
(A 3 3) -> 65536

1. (define (f n) (A 0 n)) -> 2n (obvious case)

2. (define (g n) (A 1 n)) -> 2^n

   The above expands to
   (A 0 (A 1 (- n 1)))
   (* 2 (A 0 (A 1 (- n 2))))
   (* 2 (* 2 (A 0 (A 1 (- n 3))))) and so on till n becomes 1

   which boils down to 2 * 2 * 2 (n times) = 2^n

3. (define (h n) (A 2 n)) -> 2^2^2.. (2 repeats n times)

   This expands to 
   (A 1 (A 2 (- n 1)))
   (A 1 (A 1 (A 2 (- n 2))))
   (A 1 (A 1 (A 1 (A 2 (- n 2))))) so on till n becomes 1
   (A 1 (A 1 (A 1 ... (A 1 1))))

   We know that (A 1 n) is 2^n. From this it follows that

   (A 2 n) -> 2^2^2... (n times)

